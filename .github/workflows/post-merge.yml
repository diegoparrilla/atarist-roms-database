name: Post-Merge Processing

on:
  push:
    branches:
      - main

jobs:
  process_merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git Safe Directory
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
  


      - name: Set up Git user
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install boto3

      - name: Check if Latest Commit is a Merge Commit
        id: check_merge
        run: |
          PARENT_COUNT=$(git show -s --format=%P HEAD | wc -w)
          echo "Parent count: $PARENT_COUNT"
          if [ "$PARENT_COUNT" -gt 1 ]; then
            echo "is_merge=true" >> $GITHUB_OUTPUT
          else
            echo "is_merge=false" >> $GITHUB_OUTPUT
          fi

      - name: Show HEAD Commit Details
        run: |
          git show --no-patch --format=fuller HEAD

      - name: Get Associated Pull Request
        if: steps.check_merge.outputs.is_merge == 'true'
        id: get_pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commit_sha = '${{ github.sha }}';
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commit_sha,
            });
            if (prs.data.length > 0) {
              const pr = prs.data[0];
              core.setOutput('pr_number', pr.number.toString());
              core.setOutput('pr_body', pr.body || '');
            } else {
              core.setFailed('No pull request found for this commit.');
              core.setOutput('pr_number', '');
              core.setOutput('pr_body', '');
            }

      - name: Parse Pull Request Description
        if: steps.get_pr.outputs.pr_number != ''
        uses: actions/github-script@v6
        id: parse_pr
        with:
          script: |
            const prBody = inputs.pr_body;
        
            const filenameMatch = prBody.match(/^Filename:\s*(.+)$/m);
            const nameMatch = prBody.match(/^Name:\s*(.+)$/m);
            const descriptionMatch = prBody.match(/^Description:\s*(.+)$/m);
            const tagsMatch = prBody.match(/^Tags:\s*(.+)$/m);
            const sizeMatch = prBody.match(/^Size:\s*(\d+)$/m);
        
            if (!filenameMatch) throw new Error('Filename not found or invalid in PR description.');
            if (!nameMatch) throw new Error('Name not found or invalid in PR description.');
            if (!descriptionMatch) throw new Error('Description not found or invalid in PR description.');
            if (!tagsMatch) throw new Error('Tags not found or invalid in PR description.');
            if (!sizeMatch || ![32, 64, 128].includes(parseInt(sizeMatch[1]))) {
                throw new Error('Size must be 32, 64, or 128.');
            }
        
            core.setOutput('filename', filenameMatch[1].trim());
            core.setOutput('rom_name', nameMatch[1].trim());
            core.setOutput('description', descriptionMatch[1].trim());
            core.setOutput('tags', tagsMatch[1].trim());
            core.setOutput('size_kb', sizeMatch[1].trim());

      - name: Ensure Scripts are Executable
        if: steps.get_pr.outputs.pr_number != ''
        run: |
          chmod +x ./add_rom ./create_roms_csv ./upload_rom
            
      - name: Add the ROM to the JSON file 
        if: steps.get_pr.outputs.pr_number != ''
        run: |
            ./add_rom roms.json "${{ steps.parse_pr.outputs.filename }}" "${{ steps.parse_pr.outputs.rom_name }}" "${{ steps.parse_pr.outputs.description }}" "${{ steps.parse_pr.outputs.tags }}" ${{ steps.parse_pr.outputs.size_kb }}
    
      - name: Update the CSV file
        if: steps.get_pr.outputs.pr_number != ''
        run: |
            ./create_roms_csv ./
    
      - name: Upload the ROM and new JSON and CSV files to S3
        if: steps.get_pr.outputs.pr_number != ''
        run: |
            ./upload_rom  "${{ steps.parse_pr.outputs.filename }}" --path=./
        env:
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      
      - name: Delete the ROM and remove it from the repository
        if: steps.get_pr.outputs.pr_number != ''
        run: |
            rm roms.csv
            rm "${{ steps.parse_pr.outputs.filename }}"
            git rm "${{ steps.parse_pr.outputs.filename }}"
            git add roms.json
            git commit -m "Add ${{steps.parse_pr.outputs.rom_name}}"
            git push
  
      - name: Notify Maintainers
        if: failure() && steps.get_pr.outputs.pr_number != ''
        uses: actions/github-script@v6
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const issueNumber = parseInt('${{ steps.get_pr.outputs.pr_number }}');
        
              github.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'An error occurred while processing your ROM submission. Please check the repository logs for more details.'
              });
