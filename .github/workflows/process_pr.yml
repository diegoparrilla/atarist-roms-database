name: Process Pull Request

on:
  pull_request:
    types: [opened, edited, reopened]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install boto3

      - name: Parse Pull Request Description
        uses: actions/github-script@v6
        id: parse_pr
        with:
          script: |
            const prBody = context.payload.pull_request.body;
      
            const filenameMatch = prBody.match(/^Filename:\s*(.+)$/m);
            const nameMatch = prBody.match(/^Name:\s*(.+)$/m);
            const descriptionMatch = prBody.match(/^Description:\s*(.+)$/m);
            const tagsMatch = prBody.match(/^Tags:\s*(.+)$/m);
            const sizeMatch = prBody.match(/^Size:\s*(\d+)$/m);
      
            if (!filenameMatch) throw new Error('Filename not found or invalid in PR description.');
            if (!nameMatch) throw new Error('Name not found or invalid in PR description.');
            if (!descriptionMatch) throw new Error('Description not found or invalid in PR description.');
            if (!tagsMatch) throw new Error('Tags not found or invalid in PR description.');
            if (!sizeMatch || ![32, 64, 128].includes(parseInt(sizeMatch[1]))) {
              throw new Error('Size must be 32, 64, or 128.');
            }
      
            core.setOutput('filename', filenameMatch[1].trim());
            core.setOutput('rom_name', nameMatch[1].trim());
            core.setOutput('description', descriptionMatch[1].trim());
            core.setOutput('tags', tagsMatch[1].trim());
            core.setOutput('size_kb', sizeMatch[1].trim());
        
      - name: Comment on Pull Request
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'The pull request description is missing required fields or contains errors. Please ensure all fields are present and correctly formatted.'
            })

      - name: Stop Job on Failure
        if: failure()
        run: |
          echo "Stopping job due to failure in parsing."
          exit 1  # This will cause the job to fail and prevent further steps from running
          
      - name: Display Parsed Data
        run: |
          echo "Filename: ${{ steps.parse_pr.outputs.filename }}"
          echo "Name: ${{ steps.parse_pr.outputs.rom_name }}"
          echo "Description: ${{ steps.parse_pr.outputs.description }}"
          echo "Tags: ${{ steps.parse_pr.outputs.tags }}"
          echo "Size (KB): ${{ steps.parse_pr.outputs.size_kb }}"

      - name: Check if the ROM file exists in the repository
        run: |
          if [ ! -f ${{ steps.parse_pr.outputs.filename }} ]; then
            echo "The ROM file does not exist in the repository."
            exit 1
          fi

      - name: Add the ROM to the JSON file 
        run: |
          ./add_rom roms.json "${{ steps.parse_pr.outputs.filename }}" "${{ steps.parse_pr.outputs.rom_name }}" "${{ steps.parse_pr.outputs.description }}" "${{ steps.parse_pr.outputs.tags }}" ${{ steps.parse_pr.outputs.size_kb }}

      - name: Update the CSV file
        run: |
          ./create_roms_csv ./

      - name: Upload the ROM and new JSON and CSV files to S3
        run: |
          ./upload_rom  "${{ steps.parse_pr.outputs.filename }}" --path=./
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    
      - name: Delete the ROM and remove it from the repository
        run: |
          rm roms.csv
          rm "${{ steps.parse_pr.outputs.filename }}"
          git rm "${{ steps.parse_pr.outputs.filename }}"
          git add roms.json
          git commit -m "Add ${{steps.parse_pr.outputs.rom_name}}"
          git push